// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecases/stats_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "statistics-service/internal/domain/entities"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStatsUseCase is a mock of StatsUseCase interface.
type MockStatsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStatsUseCaseMockRecorder
}

// MockStatsUseCaseMockRecorder is the mock recorder for MockStatsUseCase.
type MockStatsUseCaseMockRecorder struct {
	mock *MockStatsUseCase
}

// NewMockStatsUseCase creates a new mock instance.
func NewMockStatsUseCase(ctrl *gomock.Controller) *MockStatsUseCase {
	mock := &MockStatsUseCase{ctrl: ctrl}
	mock.recorder = &MockStatsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsUseCase) EXPECT() *MockStatsUseCaseMockRecorder {
	return m.recorder
}

// GetPostCommentsDynamics mocks base method.
func (m *MockStatsUseCase) GetPostCommentsDynamics(ctx context.Context, postID string, from, to time.Time) ([]entities.DailyStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostCommentsDynamics", ctx, postID, from, to)
	ret0, _ := ret[0].([]entities.DailyStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostCommentsDynamics indicates an expected call of GetPostCommentsDynamics.
func (mr *MockStatsUseCaseMockRecorder) GetPostCommentsDynamics(ctx, postID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostCommentsDynamics", reflect.TypeOf((*MockStatsUseCase)(nil).GetPostCommentsDynamics), ctx, postID, from, to)
}

// GetPostLikesDynamics mocks base method.
func (m *MockStatsUseCase) GetPostLikesDynamics(ctx context.Context, postID string, from, to time.Time) ([]entities.DailyStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostLikesDynamics", ctx, postID, from, to)
	ret0, _ := ret[0].([]entities.DailyStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostLikesDynamics indicates an expected call of GetPostLikesDynamics.
func (mr *MockStatsUseCaseMockRecorder) GetPostLikesDynamics(ctx, postID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostLikesDynamics", reflect.TypeOf((*MockStatsUseCase)(nil).GetPostLikesDynamics), ctx, postID, from, to)
}

// GetPostStats mocks base method.
func (m *MockStatsUseCase) GetPostStats(ctx context.Context, postID string) (*entities.PostStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostStats", ctx, postID)
	ret0, _ := ret[0].(*entities.PostStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostStats indicates an expected call of GetPostStats.
func (mr *MockStatsUseCaseMockRecorder) GetPostStats(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostStats", reflect.TypeOf((*MockStatsUseCase)(nil).GetPostStats), ctx, postID)
}

// GetPostViewsDynamics mocks base method.
func (m *MockStatsUseCase) GetPostViewsDynamics(ctx context.Context, postID string, from, to time.Time) ([]entities.DailyStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostViewsDynamics", ctx, postID, from, to)
	ret0, _ := ret[0].([]entities.DailyStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostViewsDynamics indicates an expected call of GetPostViewsDynamics.
func (mr *MockStatsUseCaseMockRecorder) GetPostViewsDynamics(ctx, postID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostViewsDynamics", reflect.TypeOf((*MockStatsUseCase)(nil).GetPostViewsDynamics), ctx, postID, from, to)
}

// GetTopPosts mocks base method.
func (m *MockStatsUseCase) GetTopPosts(ctx context.Context, statType entities.StatType, limit int) ([]entities.TopPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPosts", ctx, statType, limit)
	ret0, _ := ret[0].([]entities.TopPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPosts indicates an expected call of GetTopPosts.
func (mr *MockStatsUseCaseMockRecorder) GetTopPosts(ctx, statType, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPosts", reflect.TypeOf((*MockStatsUseCase)(nil).GetTopPosts), ctx, statType, limit)
}

// GetTopUsers mocks base method.
func (m *MockStatsUseCase) GetTopUsers(ctx context.Context, statType entities.StatType, limit int) ([]entities.TopUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopUsers", ctx, statType, limit)
	ret0, _ := ret[0].([]entities.TopUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopUsers indicates an expected call of GetTopUsers.
func (mr *MockStatsUseCaseMockRecorder) GetTopUsers(ctx, statType, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopUsers", reflect.TypeOf((*MockStatsUseCase)(nil).GetTopUsers), ctx, statType, limit)
}
