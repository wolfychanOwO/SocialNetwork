// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/stats.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatsService_GetPostStats_FullMethodName            = "/stats.StatsService/GetPostStats"
	StatsService_GetPostViewsDynamics_FullMethodName    = "/stats.StatsService/GetPostViewsDynamics"
	StatsService_GetPostLikesDynamics_FullMethodName    = "/stats.StatsService/GetPostLikesDynamics"
	StatsService_GetPostCommentsDynamics_FullMethodName = "/stats.StatsService/GetPostCommentsDynamics"
	StatsService_GetTopPosts_FullMethodName             = "/stats.StatsService/GetTopPosts"
	StatsService_GetTopUsers_FullMethodName             = "/stats.StatsService/GetTopUsers"
)

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsServiceClient interface {
	GetPostStats(ctx context.Context, in *GetPostStatsRequest, opts ...grpc.CallOption) (*PostStatsResponse, error)
	GetPostViewsDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*DynamicsResponse, error)
	GetPostLikesDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*DynamicsResponse, error)
	GetPostCommentsDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*DynamicsResponse, error)
	GetTopPosts(ctx context.Context, in *GetTopRequest, opts ...grpc.CallOption) (*TopPostsResponse, error)
	GetTopUsers(ctx context.Context, in *GetTopRequest, opts ...grpc.CallOption) (*TopUsersResponse, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) GetPostStats(ctx context.Context, in *GetPostStatsRequest, opts ...grpc.CallOption) (*PostStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostStatsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetPostStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetPostViewsDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*DynamicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetPostViewsDynamics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetPostLikesDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*DynamicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetPostLikesDynamics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetPostCommentsDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*DynamicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetPostCommentsDynamics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetTopPosts(ctx context.Context, in *GetTopRequest, opts ...grpc.CallOption) (*TopPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopPostsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetTopPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetTopUsers(ctx context.Context, in *GetTopRequest, opts ...grpc.CallOption) (*TopUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopUsersResponse)
	err := c.cc.Invoke(ctx, StatsService_GetTopUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServiceServer is the server API for StatsService service.
// All implementations must embed UnimplementedStatsServiceServer
// for forward compatibility.
type StatsServiceServer interface {
	GetPostStats(context.Context, *GetPostStatsRequest) (*PostStatsResponse, error)
	GetPostViewsDynamics(context.Context, *GetDynamicsRequest) (*DynamicsResponse, error)
	GetPostLikesDynamics(context.Context, *GetDynamicsRequest) (*DynamicsResponse, error)
	GetPostCommentsDynamics(context.Context, *GetDynamicsRequest) (*DynamicsResponse, error)
	GetTopPosts(context.Context, *GetTopRequest) (*TopPostsResponse, error)
	GetTopUsers(context.Context, *GetTopRequest) (*TopUsersResponse, error)
	mustEmbedUnimplementedStatsServiceServer()
}

// UnimplementedStatsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatsServiceServer struct{}

func (UnimplementedStatsServiceServer) GetPostStats(context.Context, *GetPostStatsRequest) (*PostStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostStats not implemented")
}
func (UnimplementedStatsServiceServer) GetPostViewsDynamics(context.Context, *GetDynamicsRequest) (*DynamicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostViewsDynamics not implemented")
}
func (UnimplementedStatsServiceServer) GetPostLikesDynamics(context.Context, *GetDynamicsRequest) (*DynamicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLikesDynamics not implemented")
}
func (UnimplementedStatsServiceServer) GetPostCommentsDynamics(context.Context, *GetDynamicsRequest) (*DynamicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostCommentsDynamics not implemented")
}
func (UnimplementedStatsServiceServer) GetTopPosts(context.Context, *GetTopRequest) (*TopPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPosts not implemented")
}
func (UnimplementedStatsServiceServer) GetTopUsers(context.Context, *GetTopRequest) (*TopUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopUsers not implemented")
}
func (UnimplementedStatsServiceServer) mustEmbedUnimplementedStatsServiceServer() {}
func (UnimplementedStatsServiceServer) testEmbeddedByValue()                      {}

// UnsafeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceServer will
// result in compilation errors.
type UnsafeStatsServiceServer interface {
	mustEmbedUnimplementedStatsServiceServer()
}

func RegisterStatsServiceServer(s grpc.ServiceRegistrar, srv StatsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatsService_ServiceDesc, srv)
}

func _StatsService_GetPostStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetPostStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetPostStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetPostStats(ctx, req.(*GetPostStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetPostViewsDynamics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetPostViewsDynamics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetPostViewsDynamics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetPostViewsDynamics(ctx, req.(*GetDynamicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetPostLikesDynamics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetPostLikesDynamics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetPostLikesDynamics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetPostLikesDynamics(ctx, req.(*GetDynamicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetPostCommentsDynamics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetPostCommentsDynamics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetPostCommentsDynamics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetPostCommentsDynamics(ctx, req.(*GetDynamicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetTopPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetTopPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetTopPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetTopPosts(ctx, req.(*GetTopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetTopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetTopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetTopUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetTopUsers(ctx, req.(*GetTopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsService_ServiceDesc is the grpc.ServiceDesc for StatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostStats",
			Handler:    _StatsService_GetPostStats_Handler,
		},
		{
			MethodName: "GetPostViewsDynamics",
			Handler:    _StatsService_GetPostViewsDynamics_Handler,
		},
		{
			MethodName: "GetPostLikesDynamics",
			Handler:    _StatsService_GetPostLikesDynamics_Handler,
		},
		{
			MethodName: "GetPostCommentsDynamics",
			Handler:    _StatsService_GetPostCommentsDynamics_Handler,
		},
		{
			MethodName: "GetTopPosts",
			Handler:    _StatsService_GetTopPosts_Handler,
		},
		{
			MethodName: "GetTopUsers",
			Handler:    _StatsService_GetTopUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stats.proto",
}
